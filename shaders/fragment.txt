#version 330 core

in vec2 TexCoord;  // Texture coordinates from vertex shader
in vec3 FragPos;   // Fragment position in world space
in vec3 Normal;    // Normal vector from vertex shader
in vec3 ViewDir;   // View direction from vertex shader

out vec4 FragColor; // Final color output

uniform sampler2D texture1; // The texture
uniform vec3 lightPos; // Light position
uniform vec3 viewPos;  // View position (camera position)

void main()
{
    // Texture color
    vec3 texColor = texture(texture1, TexCoord).rgb;

    // Ambient lighting
    float ambientStrength = 0.1;
    vec3 ambient = ambientStrength * texColor;

    // Diffuse lighting
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(lightPos - FragPos);
    float diff = max(dot(norm, lightDir), 0.0);
    vec3 diffuse = diff * texColor;

    // Specular lighting (Phong model)
    float specularStrength = 0.5;
    vec3 reflectDir = reflect(-lightDir, norm);
    float spec = pow(max(dot(ViewDir, reflectDir), 0.0), 32);
    vec3 specular = specularStrength * spec * texColor;

    // Combine all lighting components
    vec3 result = ambient + diffuse + specular;
    FragColor = vec4(result, 1.0);
}
